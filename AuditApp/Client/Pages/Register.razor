@page "/register"
@using AuditApp.Shared.Models.Dto;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@inject HttpClient Http
<h3>Cadastro de Usuário</h3>
<EditForm Model="_userRegister" OnSubmit="RegisterUser">
    <label for="username">Nome</label>
    <InputText id="username" @bind-Value="_userRegister.Name" />
    <label for="username">E-mail</label>
    <InputText id="username" @bind-Value="_userRegister.Email" type="email" />
    <label for="password">Senha</label>
    <InputText id="password" @bind-Value="_userRegister.Password" type="password" />
    <button type="submit" class="btn btn-primary ">Registrar</button>
</EditForm>
<h1>@_error</h1>

@code {
    private string _error = string.Empty;
    private UserRegister _userRegister = new UserRegister();

    private async Task RegisterUser()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("https://auditappserver20231124221256.azurewebsites.net/api/auth/register", _userRegister);

            if (result.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("login", true);
            }
            else
            {
                var e = await result.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(e))
                {
                    await JsRuntime.InvokeVoidAsync("alert", "nao tem msg");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", e);
                }
                _error = e;
                await JsRuntime.InvokeVoidAsync("alert", e);
            }
        }
        catch (Exception e)
        {
            _error = $"{e.Message}\n{e.StackTrace}\n";
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }
}
