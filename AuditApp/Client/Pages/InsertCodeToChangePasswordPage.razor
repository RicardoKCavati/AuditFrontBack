@page "/validar_codigo/{Email}"
@using AuditApp.Shared.Models.Dto;
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Validar Código para Troca de Senha</h3>
<label for="code">Código</label>
<input id="code" @bind-value="_codeValidation.Code" type="number" min="100000" max="999999" step="1" placeholder="Por favor insira o código que foi enviado para o e-mail do seu cadastro" />
<button @onclick="ValidateCode" type="submit" class="btn btn-primary ">Enviar código</button>
@code {
    [Parameter]
    public string Email { get; set; } = string.Empty;

    private int _code = 0;
    private CodeValidation _codeValidation = new CodeValidation();

    private async Task ValidateCode()
    {
        try
        {
            var plainTextEmail = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(Email));
            _codeValidation.Email = plainTextEmail;
            var response = await Http.PostAsJsonAsync("password/ValidateCode", _codeValidation);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/nova_senha/{Email}", true);
                //todo fazer essa tela
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", await response.Content.ReadAsStringAsync());
            }

        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }
}
