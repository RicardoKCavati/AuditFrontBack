@using AuditApp.Shared.Models.Dto;
@using BlazorBootstrap;
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject PreloadService LoadService
<div class="card">
    <h4 class="card-header">@Question</h4>
    <h5 class="card-header">Número da pergunta: @QuestionId</h5>    
    <h6 class="card-header">Referências</h6>    
    <div style="display: inline-flex;">
        <div class="card" style="width: 50%;">
            <div class="card-header">
                Normas
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var standards in Standards)
                {
                    <li class="list-group-item">@standards</li>
                }
            </ul>
        </div>
        <div class="card" style="width: 50%;">
            <div class="card-header">
                Requisitos
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var requirement in Requirements)
                {
                    <li class="list-group-item">@requirement</li>
                }
            </ul>
        </div>
    </div>
    <h5 class="card-header">Estado atual: @State</h5>
    <div class="card-body">
        <button class="btn btn-success" @onclick="SetStatusToTrue">Atende</button>
        <button class="btn btn-danger" @onclick="SetStatusToFalse">Não atende</button>
    </div>
</div>

@code {
    [Parameter]
    public int QuestionId { get; set; }

    [Parameter]
    public string Question { get; set; } = string.Empty;

    [Parameter]
    public string Requirement { get; set; } = string.Empty;

    [Parameter]
    public string Standard { get; set; } = string.Empty;

    [Parameter]
    public string State { get; set; } = string.Empty;

    [Parameter]
    public bool IsInCompliance { get; set; }

    [Parameter]
    public string CompanyId { get; set; } = string.Empty;

    public List<string> Standards { get; set; } = new List<string>();
    public List<string> Requirements { get; set; } = new List<string>();


    private async Task SendValue(bool complies)
    {
        try
        {
            var answeredQuestion = new AnsweredQuestion()
                {
                    CompanyId = CompanyId,
                    QuestionId = QuestionId,
                    Complies = complies
                };

            LoadService.Show(SpinnerColor.Dark);
            var response = await Http.PostAsJsonAsync("api/answer/SaveQuestionAnswered", answeredQuestion);
            LoadService.Hide();

            if (response.IsSuccessStatusCode)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Requisito atualizado com sucesso");
                IsInCompliance = complies;
                State = complies ? "Atende" : "Não atende";
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }

    private async Task SetStatusToFalse()
    {
        await SendValue(false);
    }

    private async Task SetStatusToTrue()
    {
        await SendValue(true);
    }

    protected override void OnInitialized()
    {
        Requirements = Requirement.Split(';').ToList();
        Standards = Standard.Split(';').ToList();
        IsInCompliance = IsInCompliance;
        base.OnInitialized();
    }
}
